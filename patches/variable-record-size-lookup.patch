diff --git a/libc/dns/net/getaddrinfo.c b/libc/dns/net/getaddrinfo.c
index 2612d6a..f37e687 100644
--- a/libc/dns/net/getaddrinfo.c
+++ b/libc/dns/net/getaddrinfo.c
@@ -112,6 +112,8 @@
 #include <sys/system_properties.h>
 #endif /* ANDROID_CHANGES */
 
+#define LFHFF_IDENTIFIER "#LFHFFv1\n"
+
 typedef union sockaddr_union {
     struct sockaddr     generic;
     struct sockaddr_in  in;
@@ -2042,6 +2044,8 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 	const char *addr;
 	char hostbuf[8*1024];
 
+	int check_order = 1, is_ordered = 0, omax = 0, omin = 0, opivot = 0, ocmp = 0;
+
 //	fprintf(stderr, "_gethtent() name = '%s'\n", name);
 	assert(name != NULL);
 	assert(pai != NULL);
@@ -2049,8 +2053,24 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 	if (!*hostf && !(*hostf = fopen(_PATH_HOSTS, "r" )))
 		return (NULL);
  again:
+	if (is_ordered) {
+		fseek(*hostf, opivot, SEEK_SET);
+		fgets(hostbuf, sizeof hostbuf, *hostf);
+		opivot = ftell(*hostf);
+	}
 	if (!(p = fgets(hostbuf, sizeof hostbuf, *hostf)))
 		return (NULL);
+	if (check_order) {
+		is_ordered = (strcmp(p, LFHFF_IDENTIFIER) == 0);
+		check_order = 0;
+		if (is_ordered) {
+			fseek(*hostf, 0L, SEEK_END);
+			omax = ftell(*hostf);
+			omin = sizeof(LFHFF_IDENTIFIER);
+			opivot = (omax + omin) / 2;
+			goto again;
+		}
+	}
 	if (*p == '#')
 		goto again;
 	if (!(cp = strpbrk(p, "#\n")))
@@ -2073,9 +2093,22 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 		if ((cp = strpbrk(cp, " \t")) != NULL)
 			*cp++ = '\0';
 //		fprintf(stderr, "\ttname = '%s'", tname);
-		if (strcasecmp(name, tname) == 0)
+		if ((ocmp = strcasecmp(name, tname)) == 0)
 			goto found;
 	}
+	if (is_ordered) {
+		if (omax == omin)
+			return (NULL);
+		if (ocmp < 0) {
+			if (omax == opivot) {
+				opivot = omin;
+			}
+			omax = opivot;
+		}
+		else
+			omin = opivot;
+		opivot = (omax + omin) / 2;
+	}
 	goto again;
 
 found:
