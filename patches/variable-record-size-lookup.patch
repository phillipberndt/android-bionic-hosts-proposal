From ebe4a24d66b50b1eb44b3e9fff6bb2258b80af75 Mon Sep 17 00:00:00 2001
From: Phillip Berndt <phillip.berndt@googlemail.com>
Date: Fri, 1 May 2015 13:25:15 +0200
Subject: [PATCH] libc: Support for fast search in sorted /etc/hosts files

The de-facto standard for ad-blocking on Android is to have a large
hosts database with many 127.0.0.1 entries. Bionic currently does a
linear, line-by-line search in this file for each DNS request, where
each request for a domain that is not blocked needs O(N) string
comparisons. If hosts files were sorted, one could instead do a binary
search in O(log(N)) time.

This commit adds binary search capabilities to libc and tries to
establish a standard to mark sorted hosts files: Files that start with
 "#LFHFFv1\n",    (short for lookup friendly hosts file format v1)
without quotation marks, are assumed to be sorted in ascending
strcasecmp() order. Comments and empty lines are still supported, but
listing multiple domains on a single line is not, for obvious reasons.

Experiments were carried out to determine how large the speed impact is
(on a Samsung Galaxy S5 with 38.000 entries in /etc/hosts this change
reduces a ~30ms lookup time to something in the order of microseconds).

Change-Id: Ie234a94126cdfe8364695406ddba56ab21081da4
---
 libc/dns/net/getaddrinfo.c | 53 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 52 insertions(+), 1 deletion(-)

diff --git a/libc/dns/net/getaddrinfo.c b/libc/dns/net/getaddrinfo.c
index 2612d6a..9120b73 100644
--- a/libc/dns/net/getaddrinfo.c
+++ b/libc/dns/net/getaddrinfo.c
@@ -112,6 +112,8 @@
 #include <sys/system_properties.h>
 #endif /* ANDROID_CHANGES */
 
+#define LFHFF_IDENTIFIER "#LFHFFv1\n"
+
 typedef union sockaddr_union {
     struct sockaddr     generic;
     struct sockaddr_in  in;
@@ -2042,6 +2044,8 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 	const char *addr;
 	char hostbuf[8*1024];
 
+	int check_order = 1, is_ordered = 0, omax = 0, omin = 0, opivot = 0, ocmp = 0, opivot_down = -1;
+
 //	fprintf(stderr, "_gethtent() name = '%s'\n", name);
 	assert(name != NULL);
 	assert(pai != NULL);
@@ -2049,8 +2053,41 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 	if (!*hostf && !(*hostf = fopen(_PATH_HOSTS, "r" )))
 		return (NULL);
  again:
+	if (is_ordered) {
+		int look_behind = 255;
+		int diff;
+		while (1) {
+			diff = opivot > look_behind ? look_behind : opivot;
+			int eol;
+			fseek(*hostf, opivot - diff, SEEK_SET);
+			fread(hostbuf, diff, 1, *hostf);
+			for(p = &hostbuf[diff]; *p != '\n' && p != hostbuf; p--);
+			if(p != hostbuf || diff == opivot || look_behind >= 2040)
+				break;
+			look_behind *= 2;
+			continue;
+		}
+		p++;
+		if(opivot_down < 0)
+			opivot_down = opivot - diff + (p - hostbuf);
+		if(!fgets(hostbuf + diff, sizeof(hostbuf) - diff, *hostf))
+			return (NULL);
+		opivot = ftell(*hostf);
+	}
+	else
 	if (!(p = fgets(hostbuf, sizeof hostbuf, *hostf)))
 		return (NULL);
+	if (check_order) {
+		is_ordered = (strcmp(p, LFHFF_IDENTIFIER) == 0);
+		check_order = 0;
+		if (is_ordered) {
+			fseek(*hostf, 0L, SEEK_END);
+			omax = ftell(*hostf);
+			omin = sizeof(LFHFF_IDENTIFIER);
+			opivot = (omax + omin) / 2;
+			goto again;
+		}
+	}
 	if (*p == '#')
 		goto again;
 	if (!(cp = strpbrk(p, "#\n")))
@@ -2073,9 +2110,23 @@ _gethtent(FILE **hostf, const char *name, const struct addrinfo *pai)
 		if ((cp = strpbrk(cp, " \t")) != NULL)
 			*cp++ = '\0';
 //		fprintf(stderr, "\ttname = '%s'", tname);
-		if (strcasecmp(name, tname) == 0)
+		if ((ocmp = strcasecmp(name, tname)) == 0)
 			goto found;
 	}
+	if (is_ordered) {
+//		fprintf(stderr, "omin = %d, omax = %d, opivot = %d, opivot_down: %d: %s\n", omin, omax, opivot, opivot_down, tname);
+		if (opivot_down == omax)
+			return (NULL);
+		if (omax == omin)
+			return (NULL);
+		if (ocmp < 0) {
+			omax = opivot_down;
+		}
+		else
+			omin = opivot;
+		opivot = (omax + omin) / 2;
+		opivot_down = -1;
+	}
 	goto again;
 
 found:
-- 
1.9.1

